% Perl 6 Tablet 9 - Regexes

> "We put the 'Regular' back into 'Expression'." â€” Larry Wall

Similar to [quotes](basic-syntax.html#quoting), Regular Expressions are now
a sublanguage, a language inside the language, instead of just being
funny strings. They are parsed by a completely different set of rules,
which are stored in the special variable \$\~Regex (\$\~Trans for
transliterations and \$\~P5Regex for compatible Regexes). However, these
rules are much more consistant with the main language than
before.

Literal Character
=================

Every alphanumeric character has no special meaning and matches the
character itself. If a backslash (\\) is placed directly in front
of the character it becomes a metacharacter. For non-alphanumeric
chars the opposite is true. That is, a backslashed character always
has a special meaning or is invalid. Inside of
[quotes](basic-syntax.html#quoting) every char is literal.



Metacharacter
=============

[table](ap-b-lookup.html#regex-metacharacter)



Modifier
========

xxx



Operators
=========

    rx/.../ aka Q :regex /.../
    m/.../ aka Q :match /.../
    ms/.../ aka Q :match :sigspace /.../.../
    s/.../.../ aka Q :subst /.../.../
    ss/.../.../ aka Q :subst :samespace /.../.../
    tr/.../.../ aka Q :trans /.../.../



Methods
=======

    comb
    match
    subst
    trans



Special Variables
=================

    $/
    $<..>
    $()
    $0 ..


Matching
========

xxx



Substitution
============

xxx



Transliteration
===============

    my $escaped = $html.trans(
        [ '&', '<', '>' ] =>
        [ '&amp;', '&lt;', '&gt;' ]
    );



Grammars
========

Predefined Rules
----------------

[Are listed here](ap-b-lookup.html#subrules). **\<prior\>**
is somehow an exception.

[all slang variables](ap-b-lookup.html#slang-variables)

***
